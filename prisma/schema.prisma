// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
  // relationMode = "prisma"
}

model User {
  // id                      String    @id @map("_id")    // matches kinde user id
  id    String @id @map("_id")
  // kindeId String @unique
  email String @unique

  File    File[]
  Message Message[]

  stripeCustomerId       String?   @unique @map(name: "stripe_customer_id")
  stripeSubscriptionId   String?   @unique @map(name: "stripe_subscription_id")
  stripePriceId          String?   @map(name: "stripe_price_id")
  stripeCurrentPeriodEnd DateTime? @map(name: "stripe_current_period_end")
}

enum UploadStatus {
  PENDING
  PROCESSING
  FAILED
  SUCCESS
}

model File {
  id     String  @id @map("_id") 
  fileId String? @default(cuid())
  name   String

  uploadStatus UploadStatus @default(PENDING)

  url String
  key String

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  User      User?     @relation(fields: [kindeId], references: [id])
  kindeId   String?
  messages  Message[]
}

model Message {
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  text String

  isUserMessage Boolean // so we can differenciate between user messages and ai messages

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User?    @relation(fields: [kindeId], references: [id])
  kindeId   String?
  File      File?    @relation(fields: [fileId], references: [id])
  fileId    String? 
}
