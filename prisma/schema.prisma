// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id    String @id @map("_id")
  email String @unique

  files     File[]
  messages  Message[]
  projects  Project[]
  questions Question[]

  stripeCustomerId       String?   @unique @map(name: "stripe_customer_id")
  stripeSubscriptionId   String?   @unique @map(name: "stripe_subscription_id")
  stripePriceId          String?   @map(name: "stripe_price_id")
  stripeCurrentPeriodEnd DateTime? @map(name: "stripe_current_period_end")
}

enum UploadStatus {
  PENDING
  PROCESSING
  FAILED
  SUCCESS
}

model File {
  id     String  @id @map("_id")
  fileId String? @default(cuid())
  name   String

  uploadStatus UploadStatus @default(PENDING)

  url String
  key String

  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  User       User?     @relation(fields: [kindeId], references: [id])
  kindeId    String?
  messages   Message[]
  projects   Project[] @relation(fields: [projectIds], references: [id])
  projectIds String[]  @db.ObjectId
}

model Message {
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  text String

  isUserMessage Boolean // so we can differenciate between user messages and ai messages

  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  User       User?     @relation(fields: [kindeId], references: [id])
  kindeId    String?
  File       File?     @relation(fields: [fileId], references: [id])
  fileId     String?
  Project    Project?  @relation(fields: [projectId], references: [id])
  projectId  String?   @db.ObjectId
  Question   Question? @relation(fields: [questionId], references: [id])
  questionId String?   @db.ObjectId
}

model Project {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  name    String
  kindeId String
  User    User?  @relation(fields: [kindeId], references: [id])

  fileIds String[]
  Files   File[]   @relation(fields: [fileIds], references: [id])

  messages  Message[]
  questions Question[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Question {
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  text String

  kindeId String
  User    User?  @relation(fields: [kindeId], references: [id])

  projectId String?  @db.ObjectId
  Project   Project? @relation(fields: [projectId], references: [id])

  messages Message[]

  parentQuestionId String?    @db.ObjectId
  parentQuestion   Question?  @relation("ParentChild", fields: [parentQuestionId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  subQuestions     Question[] @relation("ParentChild")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
