// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id                     String      @id @map("_id")
  email                  String      @unique
  files                  File[]
  projects               Project[]
  questions              Question[]
  messages               Message[]
  TokenCost              TokenCost[]
  QueryCost              QueryCost[]
  Note                   Note[]
  stripeCustomerId       String?     @unique @map(name: "stripe_customer_id")
  stripeSubscriptionId   String?     @unique @map(name: "stripe_subscription_id")
  stripePriceId          String?     @map(name: "stripe_price_id")
  stripeCurrentPeriodEnd DateTime?   @map(name: "stripe_current_period_end")
}

enum UploadStatus {
  PENDING
  PROCESSING
  FAILED
  SUCCESS
}

model File {
  id           String       @id @map("_id")
  fileId       String?      @default(cuid())
  name         String
  uploadStatus UploadStatus @default(PENDING)
  url          String
  key          String
  kindeId      String
  projectIds   String[]     @db.ObjectId
  questionIds  String[]     @db.ObjectId
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  messages     Message[]
  User         User         @relation(fields: [kindeId], references: [id])
  projects     Project[]    @relation(fields: [projectIds], references: [id])
  questions    Question[]   @relation(fields: [questionIds], references: [id])
}

model Message {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  text          String
  isUserMessage Boolean // so we can differenciate between user messages and ai messages
  kindeId       String
  fileId        String?
  projectId     String?     @db.ObjectId
  questionId    String?     @db.ObjectId
  isPinned      Boolean     @default(false)
  updatedAt     DateTime    @updatedAt
  createdAt     DateTime    @default(now())
  QueryCost     QueryCost[]
  User          User        @relation(fields: [kindeId], references: [id])
  File          File?       @relation(fields: [fileId], references: [id])
  Project       Project?    @relation(fields: [projectId], references: [id])
  Question      Question?   @relation(fields: [questionId], references: [id])
}

model Project {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  kindeId   String
  fileIds   String[]
  User      User       @relation(fields: [kindeId], references: [id])
  Files     File[]     @relation(fields: [fileIds], references: [id])
  questions Question[]
  messages  Message[]
  notes     Note[]
}

model Question {
  id               String     @id @default(auto()) @map("_id") @db.ObjectId
  name             String
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt
  kindeId          String
  fileIds          String[]
  projectId        String?    @db.ObjectId
  parentQuestionId String?    @db.ObjectId
  User             User?      @relation(fields: [kindeId], references: [id])
  File             File[]     @relation(fields: [fileIds], references: [id])
  Project          Project?   @relation(fields: [projectId], references: [id])
  parentQuestion   Question?  @relation("ParentChild", fields: [parentQuestionId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  subQuestions     Question[] @relation("ParentChild")
  messages         Message[]
  notes            Note[]
}

enum ContextType {
  PREV_MESSAGES
  PINNED_MESSAGES
  QUERY_MESSAGE
  QUESTIONS
  NOTES
  GPT_COMPLETION
  VECTOR_STORES
}

model TokenCost {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  kindeId     String
  contextType ContextType
  gptModel    String
  totalTokens BigInt
  queryCostId String      @db.ObjectId
  createdAt   DateTime    @default(now())
  User        User?       @relation(fields: [kindeId], references: [id])
  QueryCost   QueryCost?  @relation(fields: [queryCostId], references: [id])
}

model QueryCost {
  id         String      @id @default(auto()) @map("_id") @db.ObjectId
  kindeId    String
  messageId  String?     @db.ObjectId
  questionId String?     @db.ObjectId
  projectId  String?     @db.ObjectId
  noteId     String?     @db.ObjectId
  createdAt  DateTime    @default(now())
  User       User        @relation(fields: [kindeId], references: [id])
  message    Message?    @relation(fields: [messageId], references: [id])
  TokenCost  TokenCost[]
}

model Note {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  content    String?
  kindeId    String
  messageId  String?   @db.ObjectId
  questionId String?   @db.ObjectId
  projectId  String?   @db.ObjectId
  createdAt  DateTime  @default(now())
  User       User      @relation(fields: [kindeId], references: [id])
  Project    Project?  @relation(fields: [projectId], references: [id])
  Question   Question? @relation(fields: [questionId], references: [id])
}
